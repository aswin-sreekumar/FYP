$date
	Sat May 06 20:39:30 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module Top_module_tb $end
$var reg 1 ! clk $end
$var reg 1 " main_rst $end
$scope module Top_module $end
$var wire 1 # Core_A_inject_error $end
$var wire 1 $ Core_B_inject_error $end
$var wire 1 % Core_C_inject_error $end
$var wire 32 & PC_Top [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " main_rst $end
$var wire 1 ' rst_in $end
$var wire 1 ( core_hold $end
$var wire 3 ) Voter_state [2:0] $end
$var wire 1 * Recovery_mode $end
$var wire 1 + Recovery_Data_MemWrite_sel $end
$var wire 32 , ReadData_Recovery [31:0] $end
$var wire 32 - ReadData_Data [31:0] $end
$var wire 32 . ReadData [31:0] $end
$var wire 1 / RD_Instr_recovery $end
$var wire 32 0 RD_Instr_mem [31:0] $end
$var wire 1 1 RD_Instr_Mux_sel $end
$var wire 32 2 RD_Instr_Core_Output [31:0] $end
$var wire 32 3 RD_Instr [31:0] $end
$var wire 32 4 RD2_Top_C [31:0] $end
$var wire 32 5 RD2_Top_B [31:0] $end
$var wire 32 6 RD2_Top_A [31:0] $end
$var wire 32 7 RD2_Top [31:0] $end
$var wire 32 8 PC_voter_output [31:0] $end
$var wire 32 9 PC_Top_C [31:0] $end
$var wire 32 : PC_Top_B [31:0] $end
$var wire 32 ; PC_Top_A [31:0] $end
$var wire 1 < MemWrite_recovery $end
$var wire 1 = MemWrite_data $end
$var wire 1 > MemWrite_C $end
$var wire 1 ? MemWrite_B $end
$var wire 1 @ MemWrite_A $end
$var wire 1 A MemWrite $end
$var wire 1 B Data_Recovery_sel $end
$var wire 32 C ALUResult_C [31:0] $end
$var wire 32 D ALUResult_B [31:0] $end
$var wire 32 E ALUResult_A [31:0] $end
$var wire 32 F ALUResult [31:0] $end
$scope module Data_Memory $end
$var wire 1 ! clk $end
$var wire 1 ' rst_in $end
$var wire 1 A WE $end
$var wire 32 G WD [31:0] $end
$var wire 32 H RD [31:0] $end
$var wire 32 I A [31:0] $end
$upscope $end
$scope module Demux_Recovery_Data_Memwrite $end
$var wire 1 + s $end
$var wire 1 A c $end
$var wire 1 < b $end
$var wire 1 = a $end
$upscope $end
$scope module Instruction_Memory $end
$var wire 32 J A [31:0] $end
$var wire 1 ' rst_in $end
$var wire 32 K RD [31:0] $end
$upscope $end
$scope module Main_core_A $end
$var wire 32 L RD_Instr_Core [31:0] $end
$var wire 1 ! clk $end
$var wire 1 # inject_error $end
$var wire 1 ' rst_in $end
$var wire 1 M Zero $end
$var wire 32 N SrcB [31:0] $end
$var wire 1 O ResultSrc $end
$var wire 32 P Result [31:0] $end
$var wire 1 Q RegWrite $end
$var wire 32 R ReadData [31:0] $end
$var wire 32 S RD_Instr [31:0] $end
$var wire 32 T RD2_Top_noerror [31:0] $end
$var wire 32 U RD2_Top [31:0] $end
$var wire 32 V RD1_Top [31:0] $end
$var wire 32 W PC_Top [31:0] $end
$var wire 32 X PCPlus4 [31:0] $end
$var wire 1 Y OverFlow $end
$var wire 1 Z Negative $end
$var wire 1 @ MemWrite $end
$var wire 32 [ Imm_Ext_Top [31:0] $end
$var wire 2 \ ImmSrc [1:0] $end
$var wire 1 ] Carry $end
$var wire 1 ^ ALUSrc $end
$var wire 32 _ ALUResult [31:0] $end
$var wire 3 ` ALUControl_Top [2:0] $end
$scope module ALU $end
$var wire 1 ] Carry $end
$var wire 1 Y OverFlow $end
$var wire 1 M Zero $end
$var wire 33 a Sum [32:0] $end
$var wire 32 b Result [31:0] $end
$var wire 1 Z Negative $end
$var wire 1 c Cout $end
$var wire 32 d B [31:0] $end
$var wire 3 e ALUControl [2:0] $end
$var wire 32 f A [31:0] $end
$upscope $end
$scope module Control_Unit_Top $end
$var wire 7 g Op [6:0] $end
$var wire 3 h funct3 [2:0] $end
$var wire 7 i funct7 [6:0] $end
$var wire 1 O ResultSrc $end
$var wire 1 Q RegWrite $end
$var wire 1 @ MemWrite $end
$var wire 2 j ImmSrc [1:0] $end
$var wire 1 k Branch $end
$var wire 1 ^ ALUSrc $end
$var wire 2 l ALUOp [1:0] $end
$var wire 3 m ALUControl [2:0] $end
$scope module ALU_Decoder $end
$var wire 3 n funct3 [2:0] $end
$var wire 7 o funct7 [6:0] $end
$var wire 7 p op [6:0] $end
$var wire 2 q ALUOp [1:0] $end
$var wire 3 r ALUControl [2:0] $end
$upscope $end
$scope module Main_Decoder $end
$var wire 7 s Op [6:0] $end
$var wire 1 O ResultSrc $end
$var wire 1 Q RegWrite $end
$var wire 1 @ MemWrite $end
$var wire 2 t ImmSrc [1:0] $end
$var wire 1 k Branch $end
$var wire 1 ^ ALUSrc $end
$var wire 2 u ALUOp [1:0] $end
$upscope $end
$upscope $end
$scope module Error_injection $end
$var wire 1 # inject_error $end
$var wire 32 v enc_data [31:0] $end
$var reg 32 w error_in_enc_data [31:0] $end
$var reg 7 x rnum [6:0] $end
$upscope $end
$scope module Mux_DataMemory_to_Register $end
$var wire 32 y a [31:0] $end
$var wire 1 O s $end
$var wire 32 z c [31:0] $end
$var wire 32 { b [31:0] $end
$upscope $end
$scope module Mux_Register_to_ALU $end
$var wire 32 | a [31:0] $end
$var wire 1 ^ s $end
$var wire 32 } c [31:0] $end
$var wire 32 ~ b [31:0] $end
$upscope $end
$scope module PC $end
$var wire 1 ! clk $end
$var wire 1 ' rst_in $end
$var wire 32 !" PC_Next [31:0] $end
$var reg 32 "" PC [31:0] $end
$upscope $end
$scope module PC_Adder $end
$var wire 32 #" a [31:0] $end
$var wire 32 $" b [31:0] $end
$var wire 32 %" c [31:0] $end
$upscope $end
$scope module Register_File $end
$var wire 5 &" A1 [4:0] $end
$var wire 5 '" A2 [4:0] $end
$var wire 5 (" A3 [4:0] $end
$var wire 32 )" WD3 [31:0] $end
$var wire 1 Q WE3 $end
$var wire 1 ! clk $end
$var wire 1 ' rst_in $end
$var wire 32 *" RD2 [31:0] $end
$var wire 32 +" RD1 [31:0] $end
$var integer 32 ," i [31:0] $end
$upscope $end
$scope module Sign_Extend $end
$var wire 1 -" ImmSrc $end
$var wire 32 ." In [31:0] $end
$var wire 32 /" Imm_Ext [31:0] $end
$upscope $end
$upscope $end
$scope module Main_core_B $end
$var wire 32 0" RD_Instr_Core [31:0] $end
$var wire 1 ! clk $end
$var wire 1 $ inject_error $end
$var wire 1 ' rst_in $end
$var wire 1 1" Zero $end
$var wire 32 2" SrcB [31:0] $end
$var wire 1 3" ResultSrc $end
$var wire 32 4" Result [31:0] $end
$var wire 1 5" RegWrite $end
$var wire 32 6" ReadData [31:0] $end
$var wire 32 7" RD_Instr [31:0] $end
$var wire 32 8" RD2_Top_noerror [31:0] $end
$var wire 32 9" RD2_Top [31:0] $end
$var wire 32 :" RD1_Top [31:0] $end
$var wire 32 ;" PC_Top [31:0] $end
$var wire 32 <" PCPlus4 [31:0] $end
$var wire 1 =" OverFlow $end
$var wire 1 >" Negative $end
$var wire 1 ? MemWrite $end
$var wire 32 ?" Imm_Ext_Top [31:0] $end
$var wire 2 @" ImmSrc [1:0] $end
$var wire 1 A" Carry $end
$var wire 1 B" ALUSrc $end
$var wire 32 C" ALUResult [31:0] $end
$var wire 3 D" ALUControl_Top [2:0] $end
$scope module ALU $end
$var wire 1 A" Carry $end
$var wire 1 =" OverFlow $end
$var wire 1 1" Zero $end
$var wire 33 E" Sum [32:0] $end
$var wire 32 F" Result [31:0] $end
$var wire 1 >" Negative $end
$var wire 1 G" Cout $end
$var wire 32 H" B [31:0] $end
$var wire 3 I" ALUControl [2:0] $end
$var wire 32 J" A [31:0] $end
$upscope $end
$scope module Control_Unit_Top $end
$var wire 7 K" Op [6:0] $end
$var wire 3 L" funct3 [2:0] $end
$var wire 7 M" funct7 [6:0] $end
$var wire 1 3" ResultSrc $end
$var wire 1 5" RegWrite $end
$var wire 1 ? MemWrite $end
$var wire 2 N" ImmSrc [1:0] $end
$var wire 1 O" Branch $end
$var wire 1 B" ALUSrc $end
$var wire 2 P" ALUOp [1:0] $end
$var wire 3 Q" ALUControl [2:0] $end
$scope module ALU_Decoder $end
$var wire 3 R" funct3 [2:0] $end
$var wire 7 S" funct7 [6:0] $end
$var wire 7 T" op [6:0] $end
$var wire 2 U" ALUOp [1:0] $end
$var wire 3 V" ALUControl [2:0] $end
$upscope $end
$scope module Main_Decoder $end
$var wire 7 W" Op [6:0] $end
$var wire 1 3" ResultSrc $end
$var wire 1 5" RegWrite $end
$var wire 1 ? MemWrite $end
$var wire 2 X" ImmSrc [1:0] $end
$var wire 1 O" Branch $end
$var wire 1 B" ALUSrc $end
$var wire 2 Y" ALUOp [1:0] $end
$upscope $end
$upscope $end
$scope module Error_injection $end
$var wire 1 $ inject_error $end
$var wire 32 Z" enc_data [31:0] $end
$var reg 32 [" error_in_enc_data [31:0] $end
$var reg 7 \" rnum [6:0] $end
$upscope $end
$scope module Mux_DataMemory_to_Register $end
$var wire 32 ]" a [31:0] $end
$var wire 1 3" s $end
$var wire 32 ^" c [31:0] $end
$var wire 32 _" b [31:0] $end
$upscope $end
$scope module Mux_Register_to_ALU $end
$var wire 32 `" a [31:0] $end
$var wire 1 B" s $end
$var wire 32 a" c [31:0] $end
$var wire 32 b" b [31:0] $end
$upscope $end
$scope module PC $end
$var wire 1 ! clk $end
$var wire 1 ' rst_in $end
$var wire 32 c" PC_Next [31:0] $end
$var reg 32 d" PC [31:0] $end
$upscope $end
$scope module PC_Adder $end
$var wire 32 e" a [31:0] $end
$var wire 32 f" b [31:0] $end
$var wire 32 g" c [31:0] $end
$upscope $end
$scope module Register_File $end
$var wire 5 h" A1 [4:0] $end
$var wire 5 i" A2 [4:0] $end
$var wire 5 j" A3 [4:0] $end
$var wire 32 k" WD3 [31:0] $end
$var wire 1 5" WE3 $end
$var wire 1 ! clk $end
$var wire 1 ' rst_in $end
$var wire 32 l" RD2 [31:0] $end
$var wire 32 m" RD1 [31:0] $end
$var integer 32 n" i [31:0] $end
$upscope $end
$scope module Sign_Extend $end
$var wire 1 o" ImmSrc $end
$var wire 32 p" In [31:0] $end
$var wire 32 q" Imm_Ext [31:0] $end
$upscope $end
$upscope $end
$scope module Main_core_C $end
$var wire 32 r" RD_Instr_Core [31:0] $end
$var wire 1 ! clk $end
$var wire 1 % inject_error $end
$var wire 1 ' rst_in $end
$var wire 1 s" Zero $end
$var wire 32 t" SrcB [31:0] $end
$var wire 1 u" ResultSrc $end
$var wire 32 v" Result [31:0] $end
$var wire 1 w" RegWrite $end
$var wire 32 x" ReadData [31:0] $end
$var wire 32 y" RD_Instr [31:0] $end
$var wire 32 z" RD2_Top_noerror [31:0] $end
$var wire 32 {" RD2_Top [31:0] $end
$var wire 32 |" RD1_Top [31:0] $end
$var wire 32 }" PC_Top [31:0] $end
$var wire 32 ~" PCPlus4 [31:0] $end
$var wire 1 !# OverFlow $end
$var wire 1 "# Negative $end
$var wire 1 > MemWrite $end
$var wire 32 ## Imm_Ext_Top [31:0] $end
$var wire 2 $# ImmSrc [1:0] $end
$var wire 1 %# Carry $end
$var wire 1 &# ALUSrc $end
$var wire 32 '# ALUResult [31:0] $end
$var wire 3 (# ALUControl_Top [2:0] $end
$scope module ALU $end
$var wire 1 %# Carry $end
$var wire 1 !# OverFlow $end
$var wire 1 s" Zero $end
$var wire 33 )# Sum [32:0] $end
$var wire 32 *# Result [31:0] $end
$var wire 1 "# Negative $end
$var wire 1 +# Cout $end
$var wire 32 ,# B [31:0] $end
$var wire 3 -# ALUControl [2:0] $end
$var wire 32 .# A [31:0] $end
$upscope $end
$scope module Control_Unit_Top $end
$var wire 7 /# Op [6:0] $end
$var wire 3 0# funct3 [2:0] $end
$var wire 7 1# funct7 [6:0] $end
$var wire 1 u" ResultSrc $end
$var wire 1 w" RegWrite $end
$var wire 1 > MemWrite $end
$var wire 2 2# ImmSrc [1:0] $end
$var wire 1 3# Branch $end
$var wire 1 &# ALUSrc $end
$var wire 2 4# ALUOp [1:0] $end
$var wire 3 5# ALUControl [2:0] $end
$scope module ALU_Decoder $end
$var wire 3 6# funct3 [2:0] $end
$var wire 7 7# funct7 [6:0] $end
$var wire 7 8# op [6:0] $end
$var wire 2 9# ALUOp [1:0] $end
$var wire 3 :# ALUControl [2:0] $end
$upscope $end
$scope module Main_Decoder $end
$var wire 7 ;# Op [6:0] $end
$var wire 1 u" ResultSrc $end
$var wire 1 w" RegWrite $end
$var wire 1 > MemWrite $end
$var wire 2 <# ImmSrc [1:0] $end
$var wire 1 3# Branch $end
$var wire 1 &# ALUSrc $end
$var wire 2 =# ALUOp [1:0] $end
$upscope $end
$upscope $end
$scope module Error_injection $end
$var wire 1 % inject_error $end
$var wire 32 ># enc_data [31:0] $end
$var reg 32 ?# error_in_enc_data [31:0] $end
$var reg 7 @# rnum [6:0] $end
$upscope $end
$scope module Mux_DataMemory_to_Register $end
$var wire 32 A# a [31:0] $end
$var wire 1 u" s $end
$var wire 32 B# c [31:0] $end
$var wire 32 C# b [31:0] $end
$upscope $end
$scope module Mux_Register_to_ALU $end
$var wire 32 D# a [31:0] $end
$var wire 1 &# s $end
$var wire 32 E# c [31:0] $end
$var wire 32 F# b [31:0] $end
$upscope $end
$scope module PC $end
$var wire 1 ! clk $end
$var wire 1 ' rst_in $end
$var wire 32 G# PC_Next [31:0] $end
$var reg 32 H# PC [31:0] $end
$upscope $end
$scope module PC_Adder $end
$var wire 32 I# a [31:0] $end
$var wire 32 J# b [31:0] $end
$var wire 32 K# c [31:0] $end
$upscope $end
$scope module Register_File $end
$var wire 5 L# A1 [4:0] $end
$var wire 5 M# A2 [4:0] $end
$var wire 5 N# A3 [4:0] $end
$var wire 32 O# WD3 [31:0] $end
$var wire 1 w" WE3 $end
$var wire 1 ! clk $end
$var wire 1 ' rst_in $end
$var wire 32 P# RD2 [31:0] $end
$var wire 32 Q# RD1 [31:0] $end
$var integer 32 R# i [31:0] $end
$upscope $end
$scope module Sign_Extend $end
$var wire 1 S# ImmSrc $end
$var wire 32 T# In [31:0] $end
$var wire 32 U# Imm_Ext [31:0] $end
$upscope $end
$upscope $end
$scope module Mux_Data_Recovery $end
$var wire 32 V# a [31:0] $end
$var wire 1 B s $end
$var wire 32 W# c [31:0] $end
$var wire 32 X# b [31:0] $end
$upscope $end
$scope module Mux_RDInstr $end
$var wire 32 Y# a [31:0] $end
$var wire 32 Z# b [31:0] $end
$var wire 1 1 s $end
$var wire 32 [# c [31:0] $end
$upscope $end
$scope module PC_Controller $end
$var wire 32 \# PC_Top [31:0] $end
$var wire 32 ]# RD_Instr [31:0] $end
$var wire 1 ! clk $end
$var wire 1 ' rst_in $end
$var wire 1 ( core_hold $end
$var wire 3 ^# Voter_state [2:0] $end
$var wire 1 * Recovery_mode $end
$var wire 1 + Recovery_Data_MemWrite_sel $end
$var wire 32 _# RD_Instr_recovery [31:0] $end
$var wire 1 1 RD_Instr_Mux_sel $end
$var wire 32 `# PC_voter_output [31:0] $end
$var wire 1 B Data_Recovery_sel $end
$var reg 3 a# Recovery_stage [2:0] $end
$var reg 32 b# Rollback_instr [31:0] $end
$upscope $end
$scope module Recovery_Register $end
$var wire 1 < WE $end
$var wire 1 ! clk $end
$var wire 1 ' rst_in $end
$var wire 32 c# WD [31:0] $end
$var wire 32 d# RD [31:0] $end
$var wire 32 e# A [31:0] $end
$var integer 32 f# i [31:0] $end
$upscope $end
$scope module Rst_Controller $end
$var wire 1 ( core_hold $end
$var wire 1 " main_rst $end
$var wire 1 ' rst_in $end
$upscope $end
$scope module Voter $end
$var wire 32 g# ALUResult_A [31:0] $end
$var wire 32 h# ALUResult_B [31:0] $end
$var wire 32 i# ALUResult_C [31:0] $end
$var wire 1 @ MemWrite_A $end
$var wire 1 ? MemWrite_B $end
$var wire 1 > MemWrite_C $end
$var wire 32 j# PC_Top_A [31:0] $end
$var wire 32 k# PC_Top_B [31:0] $end
$var wire 32 l# PC_Top_C [31:0] $end
$var wire 32 m# RD2_Top_A [31:0] $end
$var wire 32 n# RD2_Top_B [31:0] $end
$var wire 32 o# RD2_Top_C [31:0] $end
$var wire 1 ! clk $end
$var wire 1 ' rst_in $end
$var wire 3 p# Voter_state [2:0] $end
$var wire 32 q# RD2_Top [31:0] $end
$var wire 32 r# PC_Top [31:0] $end
$var wire 1 A MemWrite $end
$var wire 3 s# Comp_table_RD2 [2:0] $end
$var wire 3 t# Comp_table_PC [2:0] $end
$var wire 3 u# Comp_table_Mem [2:0] $end
$var wire 3 v# Comp_table_ALU [2:0] $end
$var wire 32 w# ALUResult [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b0 w#
b0 v#
b0 u#
b0 t#
b0 s#
b0 r#
b0 q#
b111 p#
b0 o#
b0 n#
b0 m#
bx l#
bx k#
bx j#
b0 i#
b0 h#
b0 g#
b100000 f#
b0 e#
b0 d#
b0 c#
bx b#
b0 a#
b0 `#
bx _#
b111 ^#
b0z ]#
b0 \#
b0 [#
b0x Z#
b0 Y#
b0 X#
b0 W#
b0 V#
b0 U#
b0 T#
0S#
b100000 R#
b0 Q#
b0 P#
b0 O#
b0 N#
b0 M#
b0 L#
bx K#
b100 J#
bx I#
bx H#
bx G#
b0 F#
b0 E#
b0 D#
b0 C#
b0 B#
b0 A#
b1001 @#
b0 ?#
b0 >#
b0 =#
b0 <#
b0 ;#
b0 :#
b0 9#
b0 8#
b0 7#
b0 6#
b0 5#
b0 4#
03#
b0 2#
b0 1#
b0 0#
b0 /#
b0 .#
b0 -#
b0 ,#
0+#
b0 *#
b0 )#
b0 (#
b0 '#
0&#
0%#
b0 $#
b0 ##
0"#
0!#
bx ~"
bx }"
b0 |"
b0 {"
b0 z"
b0 y"
b0 x"
0w"
b0 v"
0u"
b0 t"
1s"
b0 r"
b0 q"
b0 p"
0o"
b100000 n"
b0 m"
b0 l"
b0 k"
b0 j"
b0 i"
b0 h"
bx g"
b100 f"
bx e"
bx d"
bx c"
b0 b"
b0 a"
b0 `"
b0 _"
b0 ^"
b0 ]"
b1 \"
b0 ["
b0 Z"
b0 Y"
b0 X"
b0 W"
b0 V"
b0 U"
b0 T"
b0 S"
b0 R"
b0 Q"
b0 P"
0O"
b0 N"
b0 M"
b0 L"
b0 K"
b0 J"
b0 I"
b0 H"
0G"
b0 F"
b0 E"
b0 D"
b0 C"
0B"
0A"
b0 @"
b0 ?"
0>"
0="
bx <"
bx ;"
b0 :"
b0 9"
b0 8"
b0 7"
b0 6"
05"
b0 4"
03"
b0 2"
11"
b0 0"
b0 /"
b0 ."
0-"
b100000 ,"
b0 +"
b0 *"
b0 )"
b0 ("
b0 '"
b0 &"
bx %"
b100 $"
bx #"
bx ""
bx !"
b0 ~
b0 }
b0 |
b0 {
b0 z
b0 y
b11111 x
b0 w
b0 v
b0 u
b0 t
b0 s
b0 r
b0 q
b0 p
b0 o
b0 n
b0 m
b0 l
0k
b0 j
b0 i
b0 h
b0 g
b0 f
b0 e
b0 d
0c
b0 b
b0 a
b0 `
b0 _
0^
0]
b0 \
b0 [
0Z
0Y
bx X
bx W
b0 V
b0 U
b0 T
b0 S
b0 R
0Q
b0 P
0O
b0 N
1M
b0 L
b0 K
b0 J
b0 I
b0 H
b0 G
b0 F
b0 E
b0 D
b0 C
0B
0A
0@
0?
0>
0=
0<
bx ;
bx :
bx 9
b0 8
b0 7
b0 6
b0 5
b0 4
b0 3
b0 2
01
b0 0
x/
b0 .
b0 -
b0 ,
0+
0*
b111 )
0(
0'
b0 &
0%
0$
0#
0"
0!
$end
#50
b100 ~"
b100 G#
b100 K#
b0 9
b0 }"
b0 H#
b0 I#
b0 l#
b100 <"
b100 c"
b100 g"
b0 :
b0 ;"
b0 d"
b0 e"
b0 k#
b100 X
b100 !"
b100 %"
b0 ;
b0 W
b0 ""
b0 #"
b0 j#
1!
#100
0!
#150
b1 7
b1 G
b1 c#
b1 q#
b0 ,
b0 X#
b0 d#
b110 F
b110 I
b110 e#
b110 w#
b110 v"
b110 B#
b110 O#
0s"
b110 4"
b110 ^"
b110 k"
01"
b110 P
b110 z
b110 )"
0M
b110 C
b110 '#
b110 *#
b110 A#
b110 i#
b110 D
b110 C"
b110 F"
b110 ]"
b110 h#
b110 E
b110 _
b110 b
b110 y
b110 g#
b1 t"
b1 ,#
b1 E#
b1 2"
b1 H"
b1 a"
b1 N
b1 d
b1 }
1w"
b1 4
b1 {"
b1 ?#
b1 D#
b1 o#
b11111 @#
b110 )#
15"
b1 5
b1 9"
b1 ["
b1 `"
b1 n#
b11111 \"
b110 E"
1Q
b1 6
b1 U
b1 w
b1 |
b1 m#
b1101 x
b110 a
b1 ##
b1 F#
b1 U#
b10 4#
b10 9#
b10 =#
b1 z"
b1 >#
b1 P#
b101 |"
b101 .#
b101 Q#
b1 ?"
b1 b"
b1 q"
b10 P"
b10 U"
b10 Y"
b1 8"
b1 Z"
b1 l"
b101 :"
b101 J"
b101 m"
b1 [
b1 ~
b1 /"
b10 l
b10 q
b10 u
b1 T
b1 v
b1 *"
b101 V
b101 f
b101 +"
0+
0B
01
b111 a#
b110011 /#
b110011 8#
b110011 ;#
b11 N#
b1 M#
b10 L#
b110011 K"
b110011 T"
b110011 W"
b11 j"
b1 i"
b10 h"
b110011 g
b110011 p
b110011 s
b11 ("
b1 '"
b10 &"
b111 t#
b111 v#
b111 s#
0*
b100010000000110110011 r"
b100010000000110110011 0"
b100010000000110110011 2
b100010000000110110011 L
b100010000000110110011 3
b100010000000110110011 S
b100010000000110110011 ."
b100010000000110110011 7"
b100010000000110110011 p"
b100010000000110110011 y"
b100010000000110110011 T#
b100010000000110110011 [#
b0 .
b0 R
b0 {
b0 6"
b0 _"
b0 x"
b0 C#
b0 W#
b111 u#
b111 )
b111 ^#
b111 p#
b100010000000110110011 0
b100010000000110110011 K
b100010000000110110011 Y#
b0 -
b0 H
b0 V#
1'
1"
1!
#200
0!
#250
b100 8
b100 `#
b100 r#
b1000 ~"
b1000 G#
b1000 K#
b100 9
b100 }"
b100 H#
b100 I#
b100 l#
b1000 <"
b1000 c"
b1000 g"
b100 :
b100 ;"
b100 d"
b100 e"
b100 k#
b1000 X
b1000 !"
b1000 %"
b100 ;
b100 W
b100 ""
b100 #"
b100 j#
b1 Z#
1/
b11 a#
b10000000000011 _#
b10000000000011 b#
1!
#300
0!
#350
b1000 8
b1000 `#
b1000 r#
b1100 X
b1100 !"
b1100 %"
b1000 ;
b1000 W
b1000 ""
b1000 #"
b1000 j#
b1100 <"
b1100 c"
b1100 g"
b1000 :
b1000 ;"
b1000 d"
b1000 e"
b1000 k#
b1100 ~"
b1100 G#
b1100 K#
b1000 9
b1000 }"
b1000 H#
b1000 I#
b1000 l#
b1 a#
1!
#400
0!
#450
b1100 8
b1100 `#
b1100 r#
b10000 ~"
b10000 G#
b10000 K#
b1100 9
b1100 }"
b1100 H#
b1100 I#
b1100 l#
b10000 <"
b10000 c"
b10000 g"
b1100 :
b1100 ;"
b1100 d"
b1100 e"
b1100 k#
b10000 X
b10000 !"
b10000 %"
b1100 ;
b1100 W
b1100 ""
b1100 #"
b1100 j#
b0 a#
1!
#500
0!
#550
b10000 8
b10000 `#
b10000 r#
b10100 X
b10100 !"
b10100 %"
b10000 ;
b10000 W
b10000 ""
b10000 #"
b10000 j#
b10100 <"
b10100 c"
b10100 g"
b10000 :
b10000 ;"
b10000 d"
b10000 e"
b10000 k#
b10100 ~"
b10100 G#
b10100 K#
b10000 9
b10000 }"
b10000 H#
b10000 I#
b10000 l#
1!
#600
0!
#650
b10100 8
b10100 `#
b10100 r#
b11000 ~"
b11000 G#
b11000 K#
b10100 9
b10100 }"
b10100 H#
b10100 I#
b10100 l#
b11000 <"
b11000 c"
b11000 g"
b10100 :
b10100 ;"
b10100 d"
b10100 e"
b10100 k#
b11000 X
b11000 !"
b11000 %"
b10100 ;
b10100 W
b10100 ""
b10100 #"
b10100 j#
1!
#700
0!
#750
b11000 8
b11000 `#
b11000 r#
b11100 X
b11100 !"
b11100 %"
b11000 ;
b11000 W
b11000 ""
b11000 #"
b11000 j#
b11100 <"
b11100 c"
b11100 g"
b11000 :
b11000 ;"
b11000 d"
b11000 e"
b11000 k#
b11100 ~"
b11100 G#
b11100 K#
b11000 9
b11000 }"
b11000 H#
b11000 I#
b11000 l#
1!
